name: Maven Pipeline

# This workflow triggers on push and pull request events on the main branch
on:
  push:
    branches: ["main"]
    paths:
        - 'pom.xml'

  pull_request:
    branches: ["main"]
     
    paths:
        - 'pom.xml' 

# Jobs: Define the stages of the pipeline
jobs:
  # Stage 1: Create CI Action Pipeline
  setup-ci: 
    name: Setup CI Pipeline
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Java JDK (required for Maven)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'


  # Stage 2: Run Maven with required packages
  build-with-maven:
    name: Run Maven Build
    runs-on: ubuntu-latest
    needs: setup-ci # Depends on the setup-ci job

    
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Cache Maven dependencies to speed up future builds
      - name: Cache Maven Packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-


      # Step 3: Run Maven build
      - name: Build with Maven
        run: mvn clean install
     # Example of additional shell command
      - name: Check Version
        run: |
         echo "Checking Maven project version..."
         mvn help:evaluate -Dexpression=project.version -q -DforceStdout

        # Example of a custom script to handle version logic
      - name: Check and Handle Version
        run: | 
          echo "Checking Maven project version..."
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Maven project version: $version"
          
          if [[ "$version" == *"-SNAPSHOT"* ]]; then
            echo "Snapshot version detected: $version"
            # Add custom commands here for SNAPSHOT versions
            # Example: Deploy to a test server, notify team members, etc.
          else
            echo "Release version detected: $version"
            # Add custom commands here for release versions
            # Example: Deploy to production, tag the release, etc.
          fi
        shell: bash
      
