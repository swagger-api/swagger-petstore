name: Maven Pipeline

on:
  push:
    branches: ["master"]
    
  pull_request:
    branches: ["master"]
    

jobs:
  # Stage 1: Setup CI Environment
  setup-ci: 
    name: Setup CI Pipeline
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Set up Java JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'


  # Stage 2: Build and Modify Version
  build-with-maven:
    name: Run Maven Build and Update Version
    runs-on: ubuntu-latest
    needs: setup-ci # Depends on setup-ci job

    steps:
      # Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Cache Maven dependencies
      - name: Cache Maven Packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      # Run Maven build
      - name: Build with Maven
        run: mvn clean install

      # Check Maven project version and update it if it's a SNAPSHOT version
      - name: Update Version if Snapshot
        run: |
          echo "Checking and updating Maven project version..."
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current Maven project version: $version"
          
          if [[ "$version" == *"-SNAPSHOT"* ]]; then
            echo "Snapshot version detected: $version"
            new_version=${version%-SNAPSHOT}
            echo "Updating version from $version to $new_version"
            mvn versions:set -DnewVersion=$new_version -DgenerateBackupPoms=false
          else
            echo "Release version detected: $version"
          fi
        shell: bash

      # Commit and push changes back to the repository
      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add pom.xml
          git commit -m "Updated version in pom.xml to release version"
          git push origin HEAD:${{ github.ref }}
        env:
          TOKEN: ${{ secrets.TOKEN }}
